import subprocess

def parsing_stream(stream):
    """Parse a stream file to extract information about hits, chunks, indexed patterns, and indexed crystals.
    This function uses subprocess to run grep commands on the stream file to count occurrences of specific patterns.
    It returns the number of chunks, hits, indexed patterns, and indexed crystals.
    The function handles potential errors in subprocess calls and returns default values if the patterns are not found.
    The function is designed to work with a stream file generated by a crystallographic software, which contains information about crystal hits and indexing.
    Args:
        stream (str): The path to the stream file to be parsed.
    Returns:
        tuple: A tuple containing the number of chunks, hits, indexed patterns, and indexed crystals
    Raises:
        subprocess.CalledProcessError: If the grep command fails to execute or find the patterns.
        
    """
    try:
        res_hits = subprocess.check_output(['grep', '-rc', 'hit = 1', stream]).decode('utf-8').strip().split('\n')
        hits = int(res_hits[0])
        chunks = int(subprocess.check_output(['grep', '-c', 'Image filename',stream]).decode('utf-8').strip().split('\n')[0]) #len(res_hits)
    except subprocess.CalledProcessError:
        hits = 0
        chunks = 0

    try:
        res_indexed = subprocess.check_output(['grep', '-rc', 'Begin crystal',stream]).decode('utf-8').strip().split('\n')
        indexed = int(res_indexed[0])
    except subprocess.CalledProcessError:
        indexed = 0

    try:
        res_none_indexed_patterns = subprocess.check_output(['grep', '-rc', 'indexed_by = none',stream]).decode('utf-8').strip().split('\n')
        none_indexed_patterns = int(res_none_indexed_patterns[0])
    except subprocess.CalledProcessError:
        none_indexed_patterns = 0

    indexed_patterns = chunks - none_indexed_patterns

    return chunks, hits, indexed_patterns, indexed 
